{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["apiKeys","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","month","getMonth","year","getFullYear","date","getDate","dateBuilder","Date","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0KAEMA,EACC,mCADDA,EAEE,2CAmGOC,MAhGf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAkDb,OACE,yBACEC,UACyB,oBAAhBF,EAAQG,KACXH,EAAQG,KAAKC,KAAO,GAClB,iBACA,YACF,mBAGN,8BACE,yBAAKF,UAAU,cACb,2BACEG,KAAK,OACLH,UAAU,cACVI,YAAY,kBACZC,SAAU,SAACC,GAAD,OAAOT,EAASS,EAAEC,OAAOC,QACnCA,MAAOZ,EACPa,WAhEK,SAACC,GACE,UAAZA,EAAIC,KACNC,MAAM,GAAD,OACAnB,EADA,qBACyBG,EADzB,+BACqDH,IAEvDoB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,UA0DU,oBAAhBlB,EAAQG,KACd,6BACE,yBAAKD,UAAU,gBACb,yBAAKA,UAAU,YACZF,EAAQqB,KADX,IACkBrB,EAAQsB,IAAIC,SAE9B,yBAAKrB,UAAU,QA3DP,SAACsB,GACnB,IAwBIC,EAVO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAGaD,EAAEE,UACbC,EAzBS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAaiBH,EAAEI,YACjBC,EAAOL,EAAEM,cACTC,EAAOP,EAAEQ,UAEb,MAAM,GAAN,OAAUP,EAAV,aAAkBM,EAAlB,YAA0BJ,EAA1B,YAAmCE,EAAnC,KA6BiCI,CAAY,IAAIC,QAEzC,yBAAKhC,UAAU,eACb,yBAAKA,UAAU,eACZiC,KAAKC,MAAMpC,EAAQG,KAAKC,MAD3B,SAGA,yBAAKF,UAAU,WAAWF,EAAQA,QAAQ,GAAGG,QAIjD,yBAAKD,UAAU,gBACb,4FCnFQmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.6b7c4ba3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst apiKeys = {\r\n  key: \"bccf8fe7f752ac28bdc64bdcdba6922d\",\r\n  base: \"https://api.openweathermap.org/data/2.5/\",\r\n};\r\n\r\nfunction App() {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [weather, setWeather] = useState({});\r\n\r\n  const search = (evt) => {\r\n    if (evt.key === \"Enter\") {\r\n      fetch(\r\n        `${apiKeys.base}weather?q=${query}&units=metric&APPID=${apiKeys.key}`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((result) => {\r\n          setWeather(result);\r\n          setQuery(\"\");\r\n          console.log(result);\r\n        });\r\n    }\r\n  };\r\n\r\n  const dateBuilder = (d) => {\r\n    let months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    let days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ];\r\n\r\n    let day = days[d.getDay()];\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n    let date = d.getDate();\r\n\r\n    return `${day}, ${date} ${month} ${year} `;\r\n  };\r\n  return (\r\n    <div\r\n      className={\r\n        typeof weather.main != \"undefined\"\r\n          ? weather.main.temp > 20\r\n            ? \"container warm\"\r\n            : \"container\"\r\n          : \"container clear\"\r\n      }\r\n    >\r\n      <main>\r\n        <div className=\"search-box\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"searchfield\"\r\n            placeholder=\"Enter City Name\"\r\n            onChange={(e) => setQuery(e.target.value)}\r\n            value={query}\r\n            onKeyPress={search}\r\n          ></input>\r\n        </div>\r\n        {typeof weather.main != \"undefined\" ? (\r\n          <div>\r\n            <div className=\"location-box\">\r\n              <div className=\"location\">\r\n                {weather.name},{weather.sys.country}\r\n              </div>\r\n              <div className=\"date\">{dateBuilder(new Date())}</div>\r\n            </div>\r\n            <div className=\"weather-box\">\r\n              <div className=\"temperature\">\r\n                {Math.round(weather.main.temp)}Â°C\r\n              </div>\r\n              <div className=\"weather\">{weather.weather[0].main}</div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"opening-page\">\r\n            <p>Please enter a name of a city to get the weather details.</p>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}